{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Directive, Injectable, TemplateRef, Component, ViewEncapsulation, ContentChild, Input, NgModule } from '@angular/core';\nimport * as i1 from '@angular/router';\nimport { GuardsCheckEnd, RouterModule } from '@angular/router';\nimport { filter, map } from 'rxjs/operators';\nimport { BehaviorSubject } from 'rxjs';\nimport * as i3 from '@angular/common';\nimport { CommonModule } from '@angular/common';\n/**\n * This directive is used to customize the breadcrumb label behavior\n * *xngBreadcrumbItem directive can be used in the child element of xng-breadcrumb\n * Usage: refer to the demo - app.component.html\n */\n\nfunction BreadcrumbComponent_ng_container_2_a_2_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\n\nfunction BreadcrumbComponent_ng_container_2_a_2_ng_container_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const breadcrumb_r1 = i0.ɵɵnextContext(2).$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(breadcrumb_r1.label);\n  }\n}\n\nconst _c0 = function (a0) {\n  return {\n    \"xng-breadcrumb-link-disabled\": a0\n  };\n};\n\nconst _c1 = function (a0, a1, a2, a3, a4, a5) {\n  return {\n    $implicit: a0,\n    info: a1,\n    last: a2,\n    first: a3,\n    index: a4,\n    count: a5\n  };\n};\n\nfunction BreadcrumbComponent_ng_container_2_a_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"a\", 7);\n    i0.ɵɵtemplate(1, BreadcrumbComponent_ng_container_2_a_2_ng_container_1_Template, 1, 0, \"ng-container\", 8);\n    i0.ɵɵtemplate(2, BreadcrumbComponent_ng_container_2_a_2_ng_container_2_Template, 2, 1, \"ng-container\", 9);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r12 = i0.ɵɵnextContext();\n    const breadcrumb_r1 = ctx_r12.$implicit;\n    const isLast_r2 = ctx_r12.last;\n    const isFirst_r3 = ctx_r12.first;\n    const index_r4 = ctx_r12.index;\n    const count_r5 = ctx_r12.count;\n    const ctx_r6 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(10, _c0, breadcrumb_r1.disable))(\"routerLink\", breadcrumb_r1.routeInterceptor ? breadcrumb_r1.routeInterceptor(breadcrumb_r1.routeLink, breadcrumb_r1) : breadcrumb_r1.routeLink)(\"queryParams\", ctx_r6.preserveQueryParams ? breadcrumb_r1.queryParams : undefined)(\"fragment\", ctx_r6.preserveFragment ? breadcrumb_r1.fragment : undefined)(\"target\", ctx_r6.anchorTarget ? ctx_r6.anchorTarget : \"_self\");\n    i0.ɵɵattribute(\"aria-disabled\", breadcrumb_r1.disable)(\"tabIndex\", breadcrumb_r1.disable ? -1 : 0);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r6.itemTemplate)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction6(12, _c1, breadcrumb_r1.label, breadcrumb_r1.info, isLast_r2, isFirst_r3, index_r4, count_r5));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r6.itemTemplate);\n  }\n}\n\nfunction BreadcrumbComponent_ng_container_2_label_3_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\n\nfunction BreadcrumbComponent_ng_container_2_label_3_ng_container_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const breadcrumb_r1 = i0.ɵɵnextContext(2).$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(breadcrumb_r1.label);\n  }\n}\n\nfunction BreadcrumbComponent_ng_container_2_label_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"label\", 10);\n    i0.ɵɵtemplate(1, BreadcrumbComponent_ng_container_2_label_3_ng_container_1_Template, 1, 0, \"ng-container\", 8);\n    i0.ɵɵtemplate(2, BreadcrumbComponent_ng_container_2_label_3_ng_container_2_Template, 2, 1, \"ng-container\", 9);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r16 = i0.ɵɵnextContext();\n    const breadcrumb_r1 = ctx_r16.$implicit;\n    const isLast_r2 = ctx_r16.last;\n    const isFirst_r3 = ctx_r16.first;\n    const index_r4 = ctx_r16.index;\n    const count_r5 = ctx_r16.count;\n    const ctx_r7 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r7.itemTemplate)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction6(3, _c1, breadcrumb_r1.label, breadcrumb_r1.info, isLast_r2, isFirst_r3, index_r4, count_r5));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r7.itemTemplate);\n  }\n}\n\nfunction BreadcrumbComponent_ng_container_2_li_4_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\n\nfunction BreadcrumbComponent_ng_container_2_li_4_ng_container_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r18 = i0.ɵɵnextContext(3);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r18.separator);\n  }\n}\n\nfunction BreadcrumbComponent_ng_container_2_li_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"li\", 11);\n    i0.ɵɵtemplate(1, BreadcrumbComponent_ng_container_2_li_4_ng_container_1_Template, 1, 0, \"ng-container\", 12);\n    i0.ɵɵtemplate(2, BreadcrumbComponent_ng_container_2_li_4_ng_container_2_Template, 2, 1, \"ng-container\", 9);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r8 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r8.separatorTemplate);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r8.separatorTemplate);\n  }\n}\n\nfunction BreadcrumbComponent_ng_container_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"li\", 3);\n    i0.ɵɵtemplate(2, BreadcrumbComponent_ng_container_2_a_2_Template, 3, 19, \"a\", 4);\n    i0.ɵɵtemplate(3, BreadcrumbComponent_ng_container_2_label_3_Template, 3, 10, \"label\", 5);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(4, BreadcrumbComponent_ng_container_2_li_4_Template, 3, 2, \"li\", 6);\n    i0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const isLast_r2 = ctx.last;\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", !isLast_r2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", isLast_r2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !isLast_r2);\n  }\n}\n\nclass BreadcrumbItemDirective {}\n\nBreadcrumbItemDirective.ɵfac = function BreadcrumbItemDirective_Factory(t) {\n  return new (t || BreadcrumbItemDirective)();\n};\n\nBreadcrumbItemDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: BreadcrumbItemDirective,\n  selectors: [[\"\", \"xngBreadcrumbItem\", \"\"]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(BreadcrumbItemDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[xngBreadcrumbItem]'\n    }]\n  }], null, null);\n})();\n\nconst PATH_PARAM = {\n  PREFIX: ':',\n  REGEX_IDENTIFIER: '/:[^/]+',\n  REGEX_REPLACER: '/[^/]+'\n};\nconst ALIAS_PREFIX = '@';\n\nconst isNonEmpty = obj => {\n  return obj && Object.keys(obj).length > 0;\n};\n\nclass BreadcrumbService {\n  constructor(activatedRoute, router) {\n    this.activatedRoute = activatedRoute;\n    this.router = router;\n    this.baseHref = '/';\n    /**\n     * dynamicBreadcrumbStore holds information about dynamically updated breadcrumbs.\n     * Breadcrumbs can be set from anywhere (component, service) in the app.\n     * On every breadcrumb update check this store and use the info if available.\n     */\n\n    this.dynamicBreadcrumbStore = [];\n    /**\n     * breadcrumbList for the current route\n     * When breadcrumb info is changed dynamically, check if the currentBreadcrumbs is effected\n     * If effected, update the change and emit a new stream\n     */\n\n    this.currentBreadcrumbs = [];\n    this.previousBreadcrumbs = [];\n    /**\n     * Breadcrumbs observable to be subscribed by BreadcrumbComponent\n     * Emits on every route change OR dynamic update of breadcrumb\n     */\n\n    this.breadcrumbs = new BehaviorSubject([]);\n    this.breadcrumbs$ = this.breadcrumbs.asObservable();\n    this.detectRouteChanges();\n  }\n  /**\n   * Whenever route changes build breadcrumb list again\n   */\n\n\n  detectRouteChanges() {\n    // Special case where breadcrumb service & component instantiates after a route is navigated.\n    // Ex: put breadcrumbs within *ngIf and this.router.events would be empty\n    // This check is also required where  { initialNavigation: 'enabledBlocking' } is applied to routes\n    this.setupBreadcrumbs(this.activatedRoute.snapshot);\n    this.router.events.pipe(filter(event => event instanceof GuardsCheckEnd)).subscribe(event => {\n      // activatedRoute doesn't carry data when shouldReuseRoute returns false\n      // use the event data with GuardsCheckEnd as workaround\n      // Check for shouldActivate in case where the authGuard returns false the breadcrumbs shouldn't be changed\n      if (event instanceof GuardsCheckEnd && event.shouldActivate) {\n        this.setupBreadcrumbs(event.state.root);\n      }\n    });\n  }\n\n  setupBreadcrumbs(activatedRouteSnapshot) {\n    this.previousBreadcrumbs = this.currentBreadcrumbs; // breadcrumb label for base OR root path. Usually, this can be set as 'Home'\n\n    const rootBreadcrumb = this.getRootBreadcrumb();\n    this.currentBreadcrumbs = rootBreadcrumb ? [rootBreadcrumb] : [];\n    this.prepareBreadcrumbList(activatedRouteSnapshot, this.baseHref);\n  }\n\n  getRootBreadcrumb() {\n    const rootConfig = this.router.config.find(config => config.path === '');\n    const rootBreadcrumb = this.extractObject(rootConfig?.data?.breadcrumb);\n    const storeItem = this.getFromStore(rootBreadcrumb.alias, '/');\n\n    if (isNonEmpty(rootBreadcrumb) || isNonEmpty(storeItem)) {\n      return { ...storeItem,\n        ...rootBreadcrumb,\n        routeLink: this.baseHref,\n        ...this.getQueryParamsFromPreviousList('/')\n      };\n    }\n  }\n\n  prepareBreadcrumbItem(activatedRouteSnapshot, routeLinkPrefix) {\n    const {\n      path,\n      breadcrumb\n    } = this.parseRouteData(activatedRouteSnapshot.routeConfig);\n    const resolvedSegment = this.resolvePathSegment(path, activatedRouteSnapshot);\n    const routeLink = `${routeLinkPrefix}${resolvedSegment}`;\n    const storeItem = this.getFromStore(breadcrumb.alias, routeLink);\n    const label = this.extractLabel(storeItem?.label || breadcrumb?.label, resolvedSegment);\n    let isAutoGeneratedLabel = false;\n    let autoGeneratedLabel = '';\n\n    if (!label) {\n      isAutoGeneratedLabel = true;\n      autoGeneratedLabel = resolvedSegment;\n    }\n\n    return { ...storeItem,\n      ...breadcrumb,\n      label: isAutoGeneratedLabel ? autoGeneratedLabel : label,\n      routeLink,\n      isAutoGeneratedLabel,\n      ...this.getQueryParamsFromPreviousList(routeLink)\n    };\n  }\n\n  prepareBreadcrumbList(activatedRouteSnapshot, routeLinkPrefix) {\n    if (activatedRouteSnapshot.routeConfig?.path) {\n      const breadcrumbItem = this.prepareBreadcrumbItem(activatedRouteSnapshot, routeLinkPrefix);\n      this.currentBreadcrumbs.push(breadcrumbItem);\n\n      if (activatedRouteSnapshot.firstChild) {\n        return this.prepareBreadcrumbList(activatedRouteSnapshot.firstChild, breadcrumbItem.routeLink + '/');\n      }\n    } else if (activatedRouteSnapshot.firstChild) {\n      return this.prepareBreadcrumbList(activatedRouteSnapshot.firstChild, routeLinkPrefix);\n    }\n\n    const lastCrumb = this.currentBreadcrumbs[this.currentBreadcrumbs.length - 1];\n    this.setQueryParamsForActiveBreadcrumb(lastCrumb, activatedRouteSnapshot); // remove breadcrumb items that needs to be hidden\n\n    const breadcrumbsToShow = this.currentBreadcrumbs.filter(item => !item.skip);\n    this.breadcrumbs.next(breadcrumbsToShow);\n  }\n\n  getFromStore(alias, routeLink) {\n    return this.dynamicBreadcrumbStore.find(item => {\n      return alias && alias === item.alias || routeLink && routeLink === item.routeLink || this.matchRegex(routeLink, item.routeRegex);\n    });\n  }\n  /**\n   * use exact match instead of regexp.test\n   * for /mentor/[^/]+ we should match '/mentor/12' but not '/mentor/12/abc'\n   */\n\n\n  matchRegex(routeLink, routeRegex) {\n    const match = routeLink.match(new RegExp(routeRegex));\n    return match?.[0] === routeLink;\n  }\n  /**\n   * if the path segment has route params, read the param value from url\n   * for each segment of route this gets called\n   *\n   * for mentor/:id/view - it gets called with mentor, :id, view 3 times\n   */\n\n\n  resolvePathSegment(segment, activatedRouteSnapshot) {\n    //quirk -segment can be defined as view/:id in route config in which case you need to make it view/<resolved-param>\n    if (segment.includes(PATH_PARAM.PREFIX)) {\n      Object.entries(activatedRouteSnapshot.params).forEach(([key, value]) => {\n        segment = segment.replace(`:${key}`, `${value}`);\n      });\n    }\n\n    return segment;\n  }\n  /**\n   * queryParams & fragments for previous breadcrumb path are copied over to new list\n   */\n\n\n  getQueryParamsFromPreviousList(routeLink) {\n    const {\n      queryParams,\n      fragment\n    } = this.previousBreadcrumbs.find(item => item.routeLink === routeLink) || {};\n    return {\n      queryParams,\n      fragment\n    };\n  }\n  /**\n   * set current activated route query params to the last breadcrumb item\n   */\n\n\n  setQueryParamsForActiveBreadcrumb(lastItem, activatedRouteSnapshot) {\n    if (lastItem) {\n      const {\n        queryParams,\n        fragment\n      } = activatedRouteSnapshot;\n      lastItem.queryParams = queryParams ? { ...queryParams\n      } : undefined;\n      lastItem.fragment = fragment;\n    }\n  }\n  /**\n   * For a specific route, breadcrumb can be defined either on parent OR it's child(which has empty path)\n   * When both are defined, child takes precedence\n   *\n   * Ex: Below we are setting breadcrumb on both parent and child.\n   * So, child takes precedence and \"Defined On Child\" is displayed for the route 'home'\n   * { path: 'home', loadChildren: () => import('./home/home.module').then((m) => m.HomeModule) , data: {breadcrumb: \"Defined On Module\"}}\n   *                                                AND\n   * children: [\n   *   { path: '', component: ShowUserComponent, data: {breadcrumb: \"Defined On Child\" }\n   * ]\n   */\n\n\n  parseRouteData(routeConfig) {\n    const {\n      path,\n      data\n    } = routeConfig;\n    const breadcrumb = this.mergeWithBaseChildData(routeConfig, data?.breadcrumb);\n    return {\n      path,\n      breadcrumb\n    };\n  }\n  /**\n   * get empty children of a module or Component. Empty child is the one with path: ''\n   * When parent and it's children (that has empty route path) define data merge them both with child taking precedence\n   */\n\n\n  mergeWithBaseChildData(routeConfig, config) {\n    if (!routeConfig) {\n      return this.extractObject(config);\n    }\n\n    let baseChild;\n\n    if (routeConfig.loadChildren) {\n      // To handle a module with empty child route\n      baseChild = routeConfig._loadedConfig.routes.find(route => route.path === '');\n    } else if (routeConfig.children) {\n      // To handle a component with empty child route\n      baseChild = routeConfig.children.find(route => route.path === '');\n    }\n\n    const childConfig = baseChild?.data?.breadcrumb;\n    return childConfig ? this.mergeWithBaseChildData(baseChild, { ...this.extractObject(config),\n      ...this.extractObject(childConfig)\n    }) : this.extractObject(config);\n  }\n  /**\n   * Update breadcrumb dynamically\n   *\n   * key can be a path | alias\n   *\n   * 1) Using complete route path. route can be passed the same way you define angular routes\n   * - path can be passed as 'exact path(routeLink)' or 'path with params(routeRegex)'\n   * - update label Ex: set('/mentor', 'Mentor'), set('/mentor/:id', 'Mentor Details')\n   * - change visibility Ex: set('/mentor/:id/edit', { skip: true })\n   * ------------------------------------------ OR ------------------------------------------\n   * 2) Using route alias (prefixed with '@'). alias should be unique for a route\n   * - update label Ex: set('@mentor', 'Enabler')\n   * - change visibility Ex: set('@mentorEdit', { skip: true })\n   *\n   *\n   * value can be string | BreadcrumbObject | BreadcrumbFunction\n   */\n\n\n  set(key, breadcrumb) {\n    const breadcrumbObject = this.extractObject(breadcrumb);\n    let updateArgs;\n\n    if (key.startsWith(ALIAS_PREFIX)) {\n      updateArgs = ['alias', { ...breadcrumbObject,\n        alias: key.slice(1)\n      }];\n    } else if (key.includes(PATH_PARAM.PREFIX)) {\n      updateArgs = ['routeRegex', { ...breadcrumbObject,\n        routeRegex: this.buildRegex(key)\n      }];\n    } else {\n      updateArgs = ['routeLink', { ...breadcrumbObject,\n        routeLink: this.ensureLeadingSlash(key)\n      }];\n    } // For this route if previously a breadcrumb is not defined that sets isAutoGeneratedLabel: true\n    // change it to false since this is user supplied value\n\n\n    updateArgs[1].isAutoGeneratedLabel = false;\n    this.updateStore(...updateArgs);\n    this.updateCurrentBreadcrumbs(...updateArgs);\n  }\n  /**\n   * Update the store to reuse for dynamic declarations\n   * If the store already has this route definition update it, else add\n   */\n\n\n  updateStore(key, breadcrumb) {\n    const storeItemIndex = this.dynamicBreadcrumbStore.findIndex(item => {\n      return breadcrumb[key] === item[key];\n    });\n\n    if (storeItemIndex > -1) {\n      this.dynamicBreadcrumbStore[storeItemIndex] = { ...this.dynamicBreadcrumbStore[storeItemIndex],\n        ...breadcrumb\n      };\n    } else {\n      this.dynamicBreadcrumbStore.push({ ...breadcrumb\n      });\n    }\n  }\n  /**\n   * If breadcrumb is present in current breadcrumbs update it and emit new stream\n   */\n\n\n  updateCurrentBreadcrumbs(key, breadcrumb) {\n    const itemIndex = this.currentBreadcrumbs.findIndex(item => {\n      return key === 'routeRegex' ? this.matchRegex(item.routeLink, breadcrumb[key]) : breadcrumb[key] === item[key];\n    });\n\n    if (itemIndex > -1) {\n      this.currentBreadcrumbs[itemIndex] = { ...this.currentBreadcrumbs[itemIndex],\n        ...breadcrumb\n      };\n      const breadcrumbsToShow = this.currentBreadcrumbs.filter(item => !item.skip);\n      this.breadcrumbs.next([...breadcrumbsToShow]);\n    }\n  }\n  /**\n   * For a route with path param, we create regex dynamically from angular route syntax\n   * '/mentor/:id' becomes '/mentor/[^/]',\n   * breadcrumbService.set('/mentor/:id', 'Uday') should update 'Uday' as label for '/mentor/2' OR 'mentor/ada'\n   */\n\n\n  buildRegex(path) {\n    return this.ensureLeadingSlash(path).replace(new RegExp(PATH_PARAM.REGEX_IDENTIFIER, 'g'), PATH_PARAM.REGEX_REPLACER);\n  }\n\n  ensureLeadingSlash(path) {\n    return path.startsWith('/') ? path : `/${path}`;\n  }\n  /**\n   * In App's RouteConfig, breadcrumb can be defined as a string OR a function OR an object\n   *\n   * string: simple static breadcrumb label for a path\n   * function: callback that gets invoked with resolved path param\n   * object: additional data defined along with breadcrumb label that gets passed to *xngBreadcrumbItem directive\n   */\n\n\n  extractLabel(config, resolvedParam) {\n    const label = typeof config === 'object' ? config.label : config;\n\n    if (typeof label === 'function') {\n      return label(resolvedParam);\n    }\n\n    return label;\n  }\n\n  extractObject(config) {\n    // don't include {label} if config is undefined. This is important since we merge the configs\n    if (config && (typeof config === 'string' || typeof config === 'function')) {\n      return {\n        label: config\n      };\n    }\n\n    return config || {};\n  }\n\n}\n\nBreadcrumbService.ɵfac = function BreadcrumbService_Factory(t) {\n  return new (t || BreadcrumbService)(i0.ɵɵinject(i1.ActivatedRoute), i0.ɵɵinject(i1.Router));\n};\n\nBreadcrumbService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: BreadcrumbService,\n  factory: BreadcrumbService.ɵfac,\n  providedIn: 'root'\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(BreadcrumbService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: i1.ActivatedRoute\n    }, {\n      type: i1.Router\n    }];\n  }, null);\n})();\n\nclass BreadcrumbComponent {\n  constructor(breadcrumbService, activateRoute) {\n    this.breadcrumbService = breadcrumbService;\n    this._separator = '/';\n    /**\n     * If true, breadcrumb is auto generated even without any mapping label\n     * Default label is same as route segment\n     */\n\n    this.autoGenerate = true;\n    /**\n     * By default query params will be preserved with breadcrumbs\n     */\n\n    this.preserveQueryParams = true;\n    /**\n     * By default query fragments will be preserved with breadcrumbs\n     */\n\n    this.preserveFragment = true;\n    /**\n     * custom class provided by consumer to increase specificity\n     * This will benefit to override styles that are conflicting\n     */\n\n    this.class = '';\n    this.setupMessage = 'not set up yet';\n    this.someParameterValue = null; // breadcrumb inside ngIf works only this way\n\n    activateRoute.params.subscribe(params => {\n      this.setupComponent(params['someParam']);\n    });\n  }\n  /**\n   * separator between breadcrumbs, defaults to '/'.\n   * User can customize separator either by passing a String or Template\n   *\n   * String --> Ex: <xng-breadcrumb separator=\"-\"> </xng-breadcrumb>\n   *\n   * Template --> Ex: <xng-breadcrumb [separator]=\"separatorTemplate\"> </xng-breadcrumb>\n   * <ng-template #separatorTemplate><mat-icon>arrow_right</mat-icon></ng-template>\n   */\n\n\n  set separator(value) {\n    if (value instanceof TemplateRef) {\n      this.separatorTemplate = value;\n      this._separator = undefined;\n    } else {\n      this.separatorTemplate = undefined;\n      this._separator = value || '/';\n    }\n  }\n\n  get separator() {\n    return this._separator;\n  }\n\n  setupComponent(someParam) {\n    this.setupMessage = 'set up at ' + new Date();\n    this.someParameterValue = someParam;\n  }\n\n  ngOnInit() {\n    this.breadcrumbs$ = this.breadcrumbService.breadcrumbs$.pipe(map(breadcrumbs => {\n      return breadcrumbs.filter(breadcrumb => {\n        // Usually, breadcrumb list can contain a combination of auto generated and user specified labels\n        // this filters autogenerated labels in case of \"[autoGenerate]: false\"\n        if (this.autoGenerate) {\n          return true;\n        }\n\n        return !breadcrumb.isAutoGeneratedLabel;\n      }).map(breadcrumb => {\n        // Do not mutate breadcrumb as its source of truth.\n        // There can be scenarios where we can have multiple xng-breadcrumb instances in page\n        const {\n          routeInterceptor,\n          routeLink\n        } = breadcrumb;\n        return { ...breadcrumb,\n          routeLink: routeInterceptor?.(routeLink, breadcrumb) || routeLink\n        };\n      });\n    }));\n  }\n\n}\n\nBreadcrumbComponent.ɵfac = function BreadcrumbComponent_Factory(t) {\n  return new (t || BreadcrumbComponent)(i0.ɵɵdirectiveInject(BreadcrumbService), i0.ɵɵdirectiveInject(i1.ActivatedRoute));\n};\n\nBreadcrumbComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: BreadcrumbComponent,\n  selectors: [[\"xng-breadcrumb\"]],\n  contentQueries: function BreadcrumbComponent_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      i0.ɵɵcontentQuery(dirIndex, BreadcrumbItemDirective, 5, TemplateRef);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.itemTemplate = _t.first);\n    }\n  },\n  inputs: {\n    autoGenerate: \"autoGenerate\",\n    preserveQueryParams: \"preserveQueryParams\",\n    preserveFragment: \"preserveFragment\",\n    class: \"class\",\n    anchorTarget: \"anchorTarget\",\n    separator: \"separator\"\n  },\n  decls: 4,\n  vars: 4,\n  consts: [[\"aria-label\", \"breadcrumb\", 1, \"xng-breadcrumb-root\", 3, \"ngClass\"], [1, \"xng-breadcrumb-list\"], [4, \"ngFor\", \"ngForOf\"], [1, \"xng-breadcrumb-item\"], [\"class\", \"xng-breadcrumb-link\", \"role\", \"button\", \"rel\", \"noopener noreferrer\", 3, \"ngClass\", \"routerLink\", \"queryParams\", \"fragment\", \"target\", 4, \"ngIf\"], [\"class\", \"xng-breadcrumb-trail\", 4, \"ngIf\"], [\"class\", \"xng-breadcrumb-separator\", \"aria-hidden\", \"true\", \"role\", \"separator\", 4, \"ngIf\"], [\"role\", \"button\", \"rel\", \"noopener noreferrer\", 1, \"xng-breadcrumb-link\", 3, \"ngClass\", \"routerLink\", \"queryParams\", \"fragment\", \"target\"], [4, \"ngTemplateOutlet\", \"ngTemplateOutletContext\"], [4, \"ngIf\"], [1, \"xng-breadcrumb-trail\"], [\"aria-hidden\", \"true\", \"role\", \"separator\", 1, \"xng-breadcrumb-separator\"], [4, \"ngTemplateOutlet\"]],\n  template: function BreadcrumbComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"nav\", 0);\n      i0.ɵɵelementStart(1, \"ol\", 1);\n      i0.ɵɵtemplate(2, BreadcrumbComponent_ng_container_2_Template, 5, 3, \"ng-container\", 2);\n      i0.ɵɵpipe(3, \"async\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngClass\", ctx.class);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpipeBind1(3, 2, ctx.breadcrumbs$));\n    }\n  },\n  directives: [i3.NgClass, i3.NgForOf, i3.NgIf, i1.RouterLinkWithHref, i3.NgTemplateOutlet],\n  pipes: [i3.AsyncPipe],\n  styles: [\".xng-breadcrumb-root{margin:0;color:#0009}.xng-breadcrumb-list{display:flex;align-items:center;flex-wrap:wrap;margin:0;padding:0}.xng-breadcrumb-item{list-style:none}.xng-breadcrumb-trail{display:flex;align-items:center;color:#000000e6}.xng-breadcrumb-link{display:flex;align-items:center;white-space:nowrap;color:inherit;text-decoration:none;transition:-webkit-text-decoration .3s;transition:text-decoration .3s;transition:text-decoration .3s,-webkit-text-decoration .3s;cursor:pointer}.xng-breadcrumb-link:hover{text-decoration:underline}.xng-breadcrumb-link-disabled{pointer-events:none;cursor:disabled}.xng-breadcrumb-separator{display:flex;-webkit-user-select:none;user-select:none;margin-left:8px;margin-right:8px}\\n\"],\n  encapsulation: 2\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(BreadcrumbComponent, [{\n    type: Component,\n    args: [{\n      selector: 'xng-breadcrumb',\n      encapsulation: ViewEncapsulation.None,\n      template: \"<nav aria-label=\\\"breadcrumb\\\" class=\\\"xng-breadcrumb-root\\\" [ngClass]=\\\"class\\\">\\n  <ol class=\\\"xng-breadcrumb-list\\\">\\n    <ng-container\\n      *ngFor=\\\"\\n        let breadcrumb of breadcrumbs$ | async;\\n        last as isLast;\\n        first as isFirst;\\n        index as index;\\n        count as count\\n      \\\"\\n    >\\n      <li class=\\\"xng-breadcrumb-item\\\">\\n        <a\\n          *ngIf=\\\"!isLast\\\"\\n          class=\\\"xng-breadcrumb-link\\\"\\n          [ngClass]=\\\"{ 'xng-breadcrumb-link-disabled': breadcrumb.disable }\\\"\\n          [attr.aria-disabled]=\\\"breadcrumb.disable\\\"\\n          [attr.tabIndex]=\\\"breadcrumb.disable ? -1 : 0\\\"\\n          role=\\\"button\\\"\\n          rel=\\\"noopener noreferrer\\\"\\n          [routerLink]=\\\"\\n            breadcrumb.routeInterceptor\\n              ? breadcrumb.routeInterceptor(breadcrumb.routeLink, breadcrumb)\\n              : breadcrumb.routeLink\\n          \\\"\\n          [queryParams]=\\\"\\n            preserveQueryParams ? breadcrumb.queryParams : undefined\\n          \\\"\\n          [fragment]=\\\"preserveFragment ? breadcrumb.fragment : undefined\\\"\\n          [target]=\\\"anchorTarget ? anchorTarget : '_self'\\\"\\n        >\\n          <ng-container\\n            *ngTemplateOutlet=\\\"\\n              itemTemplate;\\n              context: {\\n                $implicit: breadcrumb.label,\\n                info: breadcrumb.info,\\n                last: isLast,\\n                first: isFirst,\\n                index: index,\\n                count: count\\n              }\\n            \\\"\\n          ></ng-container>\\n          <ng-container *ngIf=\\\"!itemTemplate\\\">{{\\n            breadcrumb.label\\n          }}</ng-container>\\n        </a>\\n\\n        <label *ngIf=\\\"isLast\\\" class=\\\"xng-breadcrumb-trail\\\">\\n          <ng-container\\n            *ngTemplateOutlet=\\\"\\n              itemTemplate;\\n              context: {\\n                $implicit: breadcrumb.label,\\n                info: breadcrumb.info,\\n                last: isLast,\\n                first: isFirst,\\n                index: index,\\n                count: count\\n              }\\n            \\\"\\n          ></ng-container>\\n          <ng-container *ngIf=\\\"!itemTemplate\\\">{{\\n            breadcrumb.label\\n          }}</ng-container>\\n        </label>\\n      </li>\\n\\n      <li\\n        *ngIf=\\\"!isLast\\\"\\n        class=\\\"xng-breadcrumb-separator\\\"\\n        aria-hidden=\\\"true\\\"\\n        role=\\\"separator\\\"\\n      >\\n        <ng-container *ngTemplateOutlet=\\\"separatorTemplate\\\"></ng-container>\\n        <ng-container *ngIf=\\\"!separatorTemplate\\\">{{ separator }}</ng-container>\\n      </li>\\n    </ng-container>\\n  </ol>\\n</nav>\\n\",\n      styles: [\".xng-breadcrumb-root{margin:0;color:#0009}.xng-breadcrumb-list{display:flex;align-items:center;flex-wrap:wrap;margin:0;padding:0}.xng-breadcrumb-item{list-style:none}.xng-breadcrumb-trail{display:flex;align-items:center;color:#000000e6}.xng-breadcrumb-link{display:flex;align-items:center;white-space:nowrap;color:inherit;text-decoration:none;transition:-webkit-text-decoration .3s;transition:text-decoration .3s;transition:text-decoration .3s,-webkit-text-decoration .3s;cursor:pointer}.xng-breadcrumb-link:hover{text-decoration:underline}.xng-breadcrumb-link-disabled{pointer-events:none;cursor:disabled}.xng-breadcrumb-separator{display:flex;-webkit-user-select:none;user-select:none;margin-left:8px;margin-right:8px}\\n\"]\n    }]\n  }], function () {\n    return [{\n      type: BreadcrumbService\n    }, {\n      type: i1.ActivatedRoute\n    }];\n  }, {\n    itemTemplate: [{\n      type: ContentChild,\n      args: [BreadcrumbItemDirective, {\n        static: false,\n        read: TemplateRef\n      }]\n    }],\n    autoGenerate: [{\n      type: Input\n    }],\n    preserveQueryParams: [{\n      type: Input\n    }],\n    preserveFragment: [{\n      type: Input\n    }],\n    class: [{\n      type: Input\n    }],\n    anchorTarget: [{\n      type: Input\n    }],\n    separator: [{\n      type: Input,\n      args: ['separator']\n    }]\n  });\n})();\n\nclass BreadcrumbModule {}\n\nBreadcrumbModule.ɵfac = function BreadcrumbModule_Factory(t) {\n  return new (t || BreadcrumbModule)();\n};\n\nBreadcrumbModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: BreadcrumbModule\n});\nBreadcrumbModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [[CommonModule, RouterModule]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(BreadcrumbModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [BreadcrumbComponent, BreadcrumbItemDirective],\n      imports: [CommonModule, RouterModule],\n      exports: [BreadcrumbComponent, BreadcrumbItemDirective]\n    }]\n  }], null, null);\n})();\n/*\n * Public API Surface of xng-breadcrumb\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { BreadcrumbComponent, BreadcrumbItemDirective, BreadcrumbModule, BreadcrumbService };","map":{"version":3,"sources":["F:/BackOfficePOS/Ecart/node_modules/xng-breadcrumb/fesm2020/xng-breadcrumb.mjs"],"names":["i0","Directive","Injectable","TemplateRef","Component","ViewEncapsulation","ContentChild","Input","NgModule","i1","GuardsCheckEnd","RouterModule","filter","map","BehaviorSubject","i3","CommonModule","BreadcrumbItemDirective","ɵfac","ɵdir","type","args","selector","PATH_PARAM","PREFIX","REGEX_IDENTIFIER","REGEX_REPLACER","ALIAS_PREFIX","isNonEmpty","obj","Object","keys","length","BreadcrumbService","constructor","activatedRoute","router","baseHref","dynamicBreadcrumbStore","currentBreadcrumbs","previousBreadcrumbs","breadcrumbs","breadcrumbs$","asObservable","detectRouteChanges","setupBreadcrumbs","snapshot","events","pipe","event","subscribe","shouldActivate","state","root","activatedRouteSnapshot","rootBreadcrumb","getRootBreadcrumb","prepareBreadcrumbList","rootConfig","config","find","path","extractObject","data","breadcrumb","storeItem","getFromStore","alias","routeLink","getQueryParamsFromPreviousList","prepareBreadcrumbItem","routeLinkPrefix","parseRouteData","routeConfig","resolvedSegment","resolvePathSegment","label","extractLabel","isAutoGeneratedLabel","autoGeneratedLabel","breadcrumbItem","push","firstChild","lastCrumb","setQueryParamsForActiveBreadcrumb","breadcrumbsToShow","item","skip","next","matchRegex","routeRegex","match","RegExp","segment","includes","entries","params","forEach","key","value","replace","queryParams","fragment","lastItem","undefined","mergeWithBaseChildData","baseChild","loadChildren","_loadedConfig","routes","route","children","childConfig","set","breadcrumbObject","updateArgs","startsWith","slice","buildRegex","ensureLeadingSlash","updateStore","updateCurrentBreadcrumbs","storeItemIndex","findIndex","itemIndex","resolvedParam","ActivatedRoute","Router","ɵprov","providedIn","BreadcrumbComponent","breadcrumbService","activateRoute","_separator","autoGenerate","preserveQueryParams","preserveFragment","class","setupMessage","someParameterValue","setupComponent","separator","separatorTemplate","someParam","Date","ngOnInit","routeInterceptor","ɵcmp","NgClass","NgForOf","NgIf","RouterLinkWithHref","NgTemplateOutlet","AsyncPipe","encapsulation","None","template","styles","itemTemplate","static","read","anchorTarget","BreadcrumbModule","ɵmod","ɵinj","declarations","imports","exports"],"mappings":"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","sourcesContent":["import * as i0 from '@angular/core';\nimport { Directive, Injectable, TemplateRef, Component, ViewEncapsulation, ContentChild, Input, NgModule } from '@angular/core';\nimport * as i1 from '@angular/router';\nimport { GuardsCheckEnd, RouterModule } from '@angular/router';\nimport { filter, map } from 'rxjs/operators';\nimport { BehaviorSubject } from 'rxjs';\nimport * as i3 from '@angular/common';\nimport { CommonModule } from '@angular/common';\n\n/**\n * This directive is used to customize the breadcrumb label behavior\n * *xngBreadcrumbItem directive can be used in the child element of xng-breadcrumb\n * Usage: refer to the demo - app.component.html\n */\nclass BreadcrumbItemDirective {\n}\nBreadcrumbItemDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: BreadcrumbItemDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive });\nBreadcrumbItemDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.2.0\", type: BreadcrumbItemDirective, selector: \"[xngBreadcrumbItem]\", ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: BreadcrumbItemDirective, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[xngBreadcrumbItem]',\n                }]\n        }] });\n\nconst PATH_PARAM = {\n    PREFIX: ':',\n    REGEX_IDENTIFIER: '/:[^/]+',\n    REGEX_REPLACER: '/[^/]+',\n};\nconst ALIAS_PREFIX = '@';\nconst isNonEmpty = (obj) => {\n    return obj && Object.keys(obj).length > 0;\n};\nclass BreadcrumbService {\n    constructor(activatedRoute, router) {\n        this.activatedRoute = activatedRoute;\n        this.router = router;\n        this.baseHref = '/';\n        /**\n         * dynamicBreadcrumbStore holds information about dynamically updated breadcrumbs.\n         * Breadcrumbs can be set from anywhere (component, service) in the app.\n         * On every breadcrumb update check this store and use the info if available.\n         */\n        this.dynamicBreadcrumbStore = [];\n        /**\n         * breadcrumbList for the current route\n         * When breadcrumb info is changed dynamically, check if the currentBreadcrumbs is effected\n         * If effected, update the change and emit a new stream\n         */\n        this.currentBreadcrumbs = [];\n        this.previousBreadcrumbs = [];\n        /**\n         * Breadcrumbs observable to be subscribed by BreadcrumbComponent\n         * Emits on every route change OR dynamic update of breadcrumb\n         */\n        this.breadcrumbs = new BehaviorSubject([]);\n        this.breadcrumbs$ = this.breadcrumbs.asObservable();\n        this.detectRouteChanges();\n    }\n    /**\n     * Whenever route changes build breadcrumb list again\n     */\n    detectRouteChanges() {\n        // Special case where breadcrumb service & component instantiates after a route is navigated.\n        // Ex: put breadcrumbs within *ngIf and this.router.events would be empty\n        // This check is also required where  { initialNavigation: 'enabledBlocking' } is applied to routes\n        this.setupBreadcrumbs(this.activatedRoute.snapshot);\n        this.router.events\n            .pipe(filter((event) => event instanceof GuardsCheckEnd))\n            .subscribe((event) => {\n            // activatedRoute doesn't carry data when shouldReuseRoute returns false\n            // use the event data with GuardsCheckEnd as workaround\n            // Check for shouldActivate in case where the authGuard returns false the breadcrumbs shouldn't be changed\n            if (event instanceof GuardsCheckEnd && event.shouldActivate) {\n                this.setupBreadcrumbs(event.state.root);\n            }\n        });\n    }\n    setupBreadcrumbs(activatedRouteSnapshot) {\n        this.previousBreadcrumbs = this.currentBreadcrumbs;\n        // breadcrumb label for base OR root path. Usually, this can be set as 'Home'\n        const rootBreadcrumb = this.getRootBreadcrumb();\n        this.currentBreadcrumbs = rootBreadcrumb ? [rootBreadcrumb] : [];\n        this.prepareBreadcrumbList(activatedRouteSnapshot, this.baseHref);\n    }\n    getRootBreadcrumb() {\n        const rootConfig = this.router.config.find((config) => config.path === '');\n        const rootBreadcrumb = this.extractObject(rootConfig?.data?.breadcrumb);\n        const storeItem = this.getFromStore(rootBreadcrumb.alias, '/');\n        if (isNonEmpty(rootBreadcrumb) || isNonEmpty(storeItem)) {\n            return {\n                ...storeItem,\n                ...rootBreadcrumb,\n                routeLink: this.baseHref,\n                ...this.getQueryParamsFromPreviousList('/'),\n            };\n        }\n    }\n    prepareBreadcrumbItem(activatedRouteSnapshot, routeLinkPrefix) {\n        const { path, breadcrumb } = this.parseRouteData(activatedRouteSnapshot.routeConfig);\n        const resolvedSegment = this.resolvePathSegment(path, activatedRouteSnapshot);\n        const routeLink = `${routeLinkPrefix}${resolvedSegment}`;\n        const storeItem = this.getFromStore(breadcrumb.alias, routeLink);\n        const label = this.extractLabel(storeItem?.label || breadcrumb?.label, resolvedSegment);\n        let isAutoGeneratedLabel = false;\n        let autoGeneratedLabel = '';\n        if (!label) {\n            isAutoGeneratedLabel = true;\n            autoGeneratedLabel = resolvedSegment;\n        }\n        return {\n            ...storeItem,\n            ...breadcrumb,\n            label: isAutoGeneratedLabel ? autoGeneratedLabel : label,\n            routeLink,\n            isAutoGeneratedLabel,\n            ...this.getQueryParamsFromPreviousList(routeLink),\n        };\n    }\n    prepareBreadcrumbList(activatedRouteSnapshot, routeLinkPrefix) {\n        if (activatedRouteSnapshot.routeConfig?.path) {\n            const breadcrumbItem = this.prepareBreadcrumbItem(activatedRouteSnapshot, routeLinkPrefix);\n            this.currentBreadcrumbs.push(breadcrumbItem);\n            if (activatedRouteSnapshot.firstChild) {\n                return this.prepareBreadcrumbList(activatedRouteSnapshot.firstChild, breadcrumbItem.routeLink + '/');\n            }\n        }\n        else if (activatedRouteSnapshot.firstChild) {\n            return this.prepareBreadcrumbList(activatedRouteSnapshot.firstChild, routeLinkPrefix);\n        }\n        const lastCrumb = this.currentBreadcrumbs[this.currentBreadcrumbs.length - 1];\n        this.setQueryParamsForActiveBreadcrumb(lastCrumb, activatedRouteSnapshot);\n        // remove breadcrumb items that needs to be hidden\n        const breadcrumbsToShow = this.currentBreadcrumbs.filter((item) => !item.skip);\n        this.breadcrumbs.next(breadcrumbsToShow);\n    }\n    getFromStore(alias, routeLink) {\n        return this.dynamicBreadcrumbStore.find((item) => {\n            return ((alias && alias === item.alias) ||\n                (routeLink && routeLink === item.routeLink) ||\n                this.matchRegex(routeLink, item.routeRegex));\n        });\n    }\n    /**\n     * use exact match instead of regexp.test\n     * for /mentor/[^/]+ we should match '/mentor/12' but not '/mentor/12/abc'\n     */\n    matchRegex(routeLink, routeRegex) {\n        const match = routeLink.match(new RegExp(routeRegex));\n        return match?.[0] === routeLink;\n    }\n    /**\n     * if the path segment has route params, read the param value from url\n     * for each segment of route this gets called\n     *\n     * for mentor/:id/view - it gets called with mentor, :id, view 3 times\n     */\n    resolvePathSegment(segment, activatedRouteSnapshot) {\n        //quirk -segment can be defined as view/:id in route config in which case you need to make it view/<resolved-param>\n        if (segment.includes(PATH_PARAM.PREFIX)) {\n            Object.entries(activatedRouteSnapshot.params).forEach(([key, value]) => {\n                segment = segment.replace(`:${key}`, `${value}`);\n            });\n        }\n        return segment;\n    }\n    /**\n     * queryParams & fragments for previous breadcrumb path are copied over to new list\n     */\n    getQueryParamsFromPreviousList(routeLink) {\n        const { queryParams, fragment } = this.previousBreadcrumbs.find((item) => item.routeLink === routeLink) ||\n            {};\n        return { queryParams, fragment };\n    }\n    /**\n     * set current activated route query params to the last breadcrumb item\n     */\n    setQueryParamsForActiveBreadcrumb(lastItem, activatedRouteSnapshot) {\n        if (lastItem) {\n            const { queryParams, fragment } = activatedRouteSnapshot;\n            lastItem.queryParams = queryParams ? { ...queryParams } : undefined;\n            lastItem.fragment = fragment;\n        }\n    }\n    /**\n     * For a specific route, breadcrumb can be defined either on parent OR it's child(which has empty path)\n     * When both are defined, child takes precedence\n     *\n     * Ex: Below we are setting breadcrumb on both parent and child.\n     * So, child takes precedence and \"Defined On Child\" is displayed for the route 'home'\n     * { path: 'home', loadChildren: () => import('./home/home.module').then((m) => m.HomeModule) , data: {breadcrumb: \"Defined On Module\"}}\n     *                                                AND\n     * children: [\n     *   { path: '', component: ShowUserComponent, data: {breadcrumb: \"Defined On Child\" }\n     * ]\n     */\n    parseRouteData(routeConfig) {\n        const { path, data } = routeConfig;\n        const breadcrumb = this.mergeWithBaseChildData(routeConfig, data?.breadcrumb);\n        return { path, breadcrumb };\n    }\n    /**\n     * get empty children of a module or Component. Empty child is the one with path: ''\n     * When parent and it's children (that has empty route path) define data merge them both with child taking precedence\n     */\n    mergeWithBaseChildData(routeConfig, config) {\n        if (!routeConfig) {\n            return this.extractObject(config);\n        }\n        let baseChild;\n        if (routeConfig.loadChildren) {\n            // To handle a module with empty child route\n            baseChild = routeConfig._loadedConfig.routes.find((route) => route.path === '');\n        }\n        else if (routeConfig.children) {\n            // To handle a component with empty child route\n            baseChild = routeConfig.children.find((route) => route.path === '');\n        }\n        const childConfig = baseChild?.data?.breadcrumb;\n        return childConfig\n            ? this.mergeWithBaseChildData(baseChild, {\n                ...this.extractObject(config),\n                ...this.extractObject(childConfig),\n            })\n            : this.extractObject(config);\n    }\n    /**\n     * Update breadcrumb dynamically\n     *\n     * key can be a path | alias\n     *\n     * 1) Using complete route path. route can be passed the same way you define angular routes\n     * - path can be passed as 'exact path(routeLink)' or 'path with params(routeRegex)'\n     * - update label Ex: set('/mentor', 'Mentor'), set('/mentor/:id', 'Mentor Details')\n     * - change visibility Ex: set('/mentor/:id/edit', { skip: true })\n     * ------------------------------------------ OR ------------------------------------------\n     * 2) Using route alias (prefixed with '@'). alias should be unique for a route\n     * - update label Ex: set('@mentor', 'Enabler')\n     * - change visibility Ex: set('@mentorEdit', { skip: true })\n     *\n     *\n     * value can be string | BreadcrumbObject | BreadcrumbFunction\n     */\n    set(key, breadcrumb) {\n        const breadcrumbObject = this.extractObject(breadcrumb);\n        let updateArgs;\n        if (key.startsWith(ALIAS_PREFIX)) {\n            updateArgs = ['alias', { ...breadcrumbObject, alias: key.slice(1) }];\n        }\n        else if (key.includes(PATH_PARAM.PREFIX)) {\n            updateArgs = [\n                'routeRegex',\n                { ...breadcrumbObject, routeRegex: this.buildRegex(key) },\n            ];\n        }\n        else {\n            updateArgs = [\n                'routeLink',\n                { ...breadcrumbObject, routeLink: this.ensureLeadingSlash(key) },\n            ];\n        }\n        // For this route if previously a breadcrumb is not defined that sets isAutoGeneratedLabel: true\n        // change it to false since this is user supplied value\n        updateArgs[1].isAutoGeneratedLabel = false;\n        this.updateStore(...updateArgs);\n        this.updateCurrentBreadcrumbs(...updateArgs);\n    }\n    /**\n     * Update the store to reuse for dynamic declarations\n     * If the store already has this route definition update it, else add\n     */\n    updateStore(key, breadcrumb) {\n        const storeItemIndex = this.dynamicBreadcrumbStore.findIndex((item) => {\n            return breadcrumb[key] === item[key];\n        });\n        if (storeItemIndex > -1) {\n            this.dynamicBreadcrumbStore[storeItemIndex] = {\n                ...this.dynamicBreadcrumbStore[storeItemIndex],\n                ...breadcrumb,\n            };\n        }\n        else {\n            this.dynamicBreadcrumbStore.push({ ...breadcrumb });\n        }\n    }\n    /**\n     * If breadcrumb is present in current breadcrumbs update it and emit new stream\n     */\n    updateCurrentBreadcrumbs(key, breadcrumb) {\n        const itemIndex = this.currentBreadcrumbs.findIndex((item) => {\n            return key === 'routeRegex'\n                ? this.matchRegex(item.routeLink, breadcrumb[key])\n                : breadcrumb[key] === item[key];\n        });\n        if (itemIndex > -1) {\n            this.currentBreadcrumbs[itemIndex] = {\n                ...this.currentBreadcrumbs[itemIndex],\n                ...breadcrumb,\n            };\n            const breadcrumbsToShow = this.currentBreadcrumbs.filter((item) => !item.skip);\n            this.breadcrumbs.next([...breadcrumbsToShow]);\n        }\n    }\n    /**\n     * For a route with path param, we create regex dynamically from angular route syntax\n     * '/mentor/:id' becomes '/mentor/[^/]',\n     * breadcrumbService.set('/mentor/:id', 'Uday') should update 'Uday' as label for '/mentor/2' OR 'mentor/ada'\n     */\n    buildRegex(path) {\n        return this.ensureLeadingSlash(path).replace(new RegExp(PATH_PARAM.REGEX_IDENTIFIER, 'g'), PATH_PARAM.REGEX_REPLACER);\n    }\n    ensureLeadingSlash(path) {\n        return path.startsWith('/') ? path : `/${path}`;\n    }\n    /**\n     * In App's RouteConfig, breadcrumb can be defined as a string OR a function OR an object\n     *\n     * string: simple static breadcrumb label for a path\n     * function: callback that gets invoked with resolved path param\n     * object: additional data defined along with breadcrumb label that gets passed to *xngBreadcrumbItem directive\n     */\n    extractLabel(config, resolvedParam) {\n        const label = typeof config === 'object' ? config.label : config;\n        if (typeof label === 'function') {\n            return label(resolvedParam);\n        }\n        return label;\n    }\n    extractObject(config) {\n        // don't include {label} if config is undefined. This is important since we merge the configs\n        if (config &&\n            (typeof config === 'string' || typeof config === 'function')) {\n            return { label: config };\n        }\n        return config || {};\n    }\n}\nBreadcrumbService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: BreadcrumbService, deps: [{ token: i1.ActivatedRoute }, { token: i1.Router }], target: i0.ɵɵFactoryTarget.Injectable });\nBreadcrumbService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: BreadcrumbService, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: BreadcrumbService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root',\n                }]\n        }], ctorParameters: function () { return [{ type: i1.ActivatedRoute }, { type: i1.Router }]; } });\n\nclass BreadcrumbComponent {\n    constructor(breadcrumbService, activateRoute) {\n        this.breadcrumbService = breadcrumbService;\n        this._separator = '/';\n        /**\n         * If true, breadcrumb is auto generated even without any mapping label\n         * Default label is same as route segment\n         */\n        this.autoGenerate = true;\n        /**\n         * By default query params will be preserved with breadcrumbs\n         */\n        this.preserveQueryParams = true;\n        /**\n         * By default query fragments will be preserved with breadcrumbs\n         */\n        this.preserveFragment = true;\n        /**\n         * custom class provided by consumer to increase specificity\n         * This will benefit to override styles that are conflicting\n         */\n        this.class = '';\n        this.setupMessage = 'not set up yet';\n        this.someParameterValue = null;\n        // breadcrumb inside ngIf works only this way\n        activateRoute.params.subscribe((params) => {\n            this.setupComponent(params['someParam']);\n        });\n    }\n    /**\n     * separator between breadcrumbs, defaults to '/'.\n     * User can customize separator either by passing a String or Template\n     *\n     * String --> Ex: <xng-breadcrumb separator=\"-\"> </xng-breadcrumb>\n     *\n     * Template --> Ex: <xng-breadcrumb [separator]=\"separatorTemplate\"> </xng-breadcrumb>\n     * <ng-template #separatorTemplate><mat-icon>arrow_right</mat-icon></ng-template>\n     */\n    set separator(value) {\n        if (value instanceof TemplateRef) {\n            this.separatorTemplate = value;\n            this._separator = undefined;\n        }\n        else {\n            this.separatorTemplate = undefined;\n            this._separator = value || '/';\n        }\n    }\n    get separator() {\n        return this._separator;\n    }\n    setupComponent(someParam) {\n        this.setupMessage = 'set up at ' + new Date();\n        this.someParameterValue = someParam;\n    }\n    ngOnInit() {\n        this.breadcrumbs$ = this.breadcrumbService.breadcrumbs$.pipe(map((breadcrumbs) => {\n            return breadcrumbs\n                .filter((breadcrumb) => {\n                // Usually, breadcrumb list can contain a combination of auto generated and user specified labels\n                // this filters autogenerated labels in case of \"[autoGenerate]: false\"\n                if (this.autoGenerate) {\n                    return true;\n                }\n                return !breadcrumb.isAutoGeneratedLabel;\n            })\n                .map((breadcrumb) => {\n                // Do not mutate breadcrumb as its source of truth.\n                // There can be scenarios where we can have multiple xng-breadcrumb instances in page\n                const { routeInterceptor, routeLink } = breadcrumb;\n                return {\n                    ...breadcrumb,\n                    routeLink: routeInterceptor?.(routeLink, breadcrumb) || routeLink,\n                };\n            });\n        }));\n    }\n}\nBreadcrumbComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: BreadcrumbComponent, deps: [{ token: BreadcrumbService }, { token: i1.ActivatedRoute }], target: i0.ɵɵFactoryTarget.Component });\nBreadcrumbComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.2.0\", type: BreadcrumbComponent, selector: \"xng-breadcrumb\", inputs: { autoGenerate: \"autoGenerate\", preserveQueryParams: \"preserveQueryParams\", preserveFragment: \"preserveFragment\", class: \"class\", anchorTarget: \"anchorTarget\", separator: \"separator\" }, queries: [{ propertyName: \"itemTemplate\", first: true, predicate: BreadcrumbItemDirective, descendants: true, read: TemplateRef }], ngImport: i0, template: \"<nav aria-label=\\\"breadcrumb\\\" class=\\\"xng-breadcrumb-root\\\" [ngClass]=\\\"class\\\">\\n  <ol class=\\\"xng-breadcrumb-list\\\">\\n    <ng-container\\n      *ngFor=\\\"\\n        let breadcrumb of breadcrumbs$ | async;\\n        last as isLast;\\n        first as isFirst;\\n        index as index;\\n        count as count\\n      \\\"\\n    >\\n      <li class=\\\"xng-breadcrumb-item\\\">\\n        <a\\n          *ngIf=\\\"!isLast\\\"\\n          class=\\\"xng-breadcrumb-link\\\"\\n          [ngClass]=\\\"{ 'xng-breadcrumb-link-disabled': breadcrumb.disable }\\\"\\n          [attr.aria-disabled]=\\\"breadcrumb.disable\\\"\\n          [attr.tabIndex]=\\\"breadcrumb.disable ? -1 : 0\\\"\\n          role=\\\"button\\\"\\n          rel=\\\"noopener noreferrer\\\"\\n          [routerLink]=\\\"\\n            breadcrumb.routeInterceptor\\n              ? breadcrumb.routeInterceptor(breadcrumb.routeLink, breadcrumb)\\n              : breadcrumb.routeLink\\n          \\\"\\n          [queryParams]=\\\"\\n            preserveQueryParams ? breadcrumb.queryParams : undefined\\n          \\\"\\n          [fragment]=\\\"preserveFragment ? breadcrumb.fragment : undefined\\\"\\n          [target]=\\\"anchorTarget ? anchorTarget : '_self'\\\"\\n        >\\n          <ng-container\\n            *ngTemplateOutlet=\\\"\\n              itemTemplate;\\n              context: {\\n                $implicit: breadcrumb.label,\\n                info: breadcrumb.info,\\n                last: isLast,\\n                first: isFirst,\\n                index: index,\\n                count: count\\n              }\\n            \\\"\\n          ></ng-container>\\n          <ng-container *ngIf=\\\"!itemTemplate\\\">{{\\n            breadcrumb.label\\n          }}</ng-container>\\n        </a>\\n\\n        <label *ngIf=\\\"isLast\\\" class=\\\"xng-breadcrumb-trail\\\">\\n          <ng-container\\n            *ngTemplateOutlet=\\\"\\n              itemTemplate;\\n              context: {\\n                $implicit: breadcrumb.label,\\n                info: breadcrumb.info,\\n                last: isLast,\\n                first: isFirst,\\n                index: index,\\n                count: count\\n              }\\n            \\\"\\n          ></ng-container>\\n          <ng-container *ngIf=\\\"!itemTemplate\\\">{{\\n            breadcrumb.label\\n          }}</ng-container>\\n        </label>\\n      </li>\\n\\n      <li\\n        *ngIf=\\\"!isLast\\\"\\n        class=\\\"xng-breadcrumb-separator\\\"\\n        aria-hidden=\\\"true\\\"\\n        role=\\\"separator\\\"\\n      >\\n        <ng-container *ngTemplateOutlet=\\\"separatorTemplate\\\"></ng-container>\\n        <ng-container *ngIf=\\\"!separatorTemplate\\\">{{ separator }}</ng-container>\\n      </li>\\n    </ng-container>\\n  </ol>\\n</nav>\\n\", styles: [\".xng-breadcrumb-root{margin:0;color:#0009}.xng-breadcrumb-list{display:flex;align-items:center;flex-wrap:wrap;margin:0;padding:0}.xng-breadcrumb-item{list-style:none}.xng-breadcrumb-trail{display:flex;align-items:center;color:#000000e6}.xng-breadcrumb-link{display:flex;align-items:center;white-space:nowrap;color:inherit;text-decoration:none;transition:-webkit-text-decoration .3s;transition:text-decoration .3s;transition:text-decoration .3s,-webkit-text-decoration .3s;cursor:pointer}.xng-breadcrumb-link:hover{text-decoration:underline}.xng-breadcrumb-link-disabled{pointer-events:none;cursor:disabled}.xng-breadcrumb-separator{display:flex;-webkit-user-select:none;user-select:none;margin-left:8px;margin-right:8px}\\n\"], directives: [{ type: i3.NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }, { type: i3.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { type: i3.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i1.RouterLinkWithHref, selector: \"a[routerLink],area[routerLink]\", inputs: [\"target\", \"queryParams\", \"fragment\", \"queryParamsHandling\", \"preserveFragment\", \"skipLocationChange\", \"replaceUrl\", \"state\", \"relativeTo\", \"routerLink\"] }, { type: i3.NgTemplateOutlet, selector: \"[ngTemplateOutlet]\", inputs: [\"ngTemplateOutletContext\", \"ngTemplateOutlet\"] }], pipes: { \"async\": i3.AsyncPipe }, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: BreadcrumbComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'xng-breadcrumb', encapsulation: ViewEncapsulation.None, template: \"<nav aria-label=\\\"breadcrumb\\\" class=\\\"xng-breadcrumb-root\\\" [ngClass]=\\\"class\\\">\\n  <ol class=\\\"xng-breadcrumb-list\\\">\\n    <ng-container\\n      *ngFor=\\\"\\n        let breadcrumb of breadcrumbs$ | async;\\n        last as isLast;\\n        first as isFirst;\\n        index as index;\\n        count as count\\n      \\\"\\n    >\\n      <li class=\\\"xng-breadcrumb-item\\\">\\n        <a\\n          *ngIf=\\\"!isLast\\\"\\n          class=\\\"xng-breadcrumb-link\\\"\\n          [ngClass]=\\\"{ 'xng-breadcrumb-link-disabled': breadcrumb.disable }\\\"\\n          [attr.aria-disabled]=\\\"breadcrumb.disable\\\"\\n          [attr.tabIndex]=\\\"breadcrumb.disable ? -1 : 0\\\"\\n          role=\\\"button\\\"\\n          rel=\\\"noopener noreferrer\\\"\\n          [routerLink]=\\\"\\n            breadcrumb.routeInterceptor\\n              ? breadcrumb.routeInterceptor(breadcrumb.routeLink, breadcrumb)\\n              : breadcrumb.routeLink\\n          \\\"\\n          [queryParams]=\\\"\\n            preserveQueryParams ? breadcrumb.queryParams : undefined\\n          \\\"\\n          [fragment]=\\\"preserveFragment ? breadcrumb.fragment : undefined\\\"\\n          [target]=\\\"anchorTarget ? anchorTarget : '_self'\\\"\\n        >\\n          <ng-container\\n            *ngTemplateOutlet=\\\"\\n              itemTemplate;\\n              context: {\\n                $implicit: breadcrumb.label,\\n                info: breadcrumb.info,\\n                last: isLast,\\n                first: isFirst,\\n                index: index,\\n                count: count\\n              }\\n            \\\"\\n          ></ng-container>\\n          <ng-container *ngIf=\\\"!itemTemplate\\\">{{\\n            breadcrumb.label\\n          }}</ng-container>\\n        </a>\\n\\n        <label *ngIf=\\\"isLast\\\" class=\\\"xng-breadcrumb-trail\\\">\\n          <ng-container\\n            *ngTemplateOutlet=\\\"\\n              itemTemplate;\\n              context: {\\n                $implicit: breadcrumb.label,\\n                info: breadcrumb.info,\\n                last: isLast,\\n                first: isFirst,\\n                index: index,\\n                count: count\\n              }\\n            \\\"\\n          ></ng-container>\\n          <ng-container *ngIf=\\\"!itemTemplate\\\">{{\\n            breadcrumb.label\\n          }}</ng-container>\\n        </label>\\n      </li>\\n\\n      <li\\n        *ngIf=\\\"!isLast\\\"\\n        class=\\\"xng-breadcrumb-separator\\\"\\n        aria-hidden=\\\"true\\\"\\n        role=\\\"separator\\\"\\n      >\\n        <ng-container *ngTemplateOutlet=\\\"separatorTemplate\\\"></ng-container>\\n        <ng-container *ngIf=\\\"!separatorTemplate\\\">{{ separator }}</ng-container>\\n      </li>\\n    </ng-container>\\n  </ol>\\n</nav>\\n\", styles: [\".xng-breadcrumb-root{margin:0;color:#0009}.xng-breadcrumb-list{display:flex;align-items:center;flex-wrap:wrap;margin:0;padding:0}.xng-breadcrumb-item{list-style:none}.xng-breadcrumb-trail{display:flex;align-items:center;color:#000000e6}.xng-breadcrumb-link{display:flex;align-items:center;white-space:nowrap;color:inherit;text-decoration:none;transition:-webkit-text-decoration .3s;transition:text-decoration .3s;transition:text-decoration .3s,-webkit-text-decoration .3s;cursor:pointer}.xng-breadcrumb-link:hover{text-decoration:underline}.xng-breadcrumb-link-disabled{pointer-events:none;cursor:disabled}.xng-breadcrumb-separator{display:flex;-webkit-user-select:none;user-select:none;margin-left:8px;margin-right:8px}\\n\"] }]\n        }], ctorParameters: function () { return [{ type: BreadcrumbService }, { type: i1.ActivatedRoute }]; }, propDecorators: { itemTemplate: [{\n                type: ContentChild,\n                args: [BreadcrumbItemDirective, { static: false, read: TemplateRef }]\n            }], autoGenerate: [{\n                type: Input\n            }], preserveQueryParams: [{\n                type: Input\n            }], preserveFragment: [{\n                type: Input\n            }], class: [{\n                type: Input\n            }], anchorTarget: [{\n                type: Input\n            }], separator: [{\n                type: Input,\n                args: ['separator']\n            }] } });\n\nclass BreadcrumbModule {\n}\nBreadcrumbModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: BreadcrumbModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nBreadcrumbModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: BreadcrumbModule, declarations: [BreadcrumbComponent, BreadcrumbItemDirective], imports: [CommonModule, RouterModule], exports: [BreadcrumbComponent, BreadcrumbItemDirective] });\nBreadcrumbModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: BreadcrumbModule, imports: [[CommonModule, RouterModule]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: BreadcrumbModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [BreadcrumbComponent, BreadcrumbItemDirective],\n                    imports: [CommonModule, RouterModule],\n                    exports: [BreadcrumbComponent, BreadcrumbItemDirective],\n                }]\n        }] });\n\n/*\n * Public API Surface of xng-breadcrumb\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BreadcrumbComponent, BreadcrumbItemDirective, BreadcrumbModule, BreadcrumbService };\n"]},"metadata":{},"sourceType":"module"}