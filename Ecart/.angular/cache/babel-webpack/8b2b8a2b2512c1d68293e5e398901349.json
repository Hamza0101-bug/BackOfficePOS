{"ast":null,"code":"import { catchError, throwError } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"ngx-toastr\";\nexport let ErrorInterceptor = /*#__PURE__*/(() => {\n  class ErrorInterceptor {\n    constructor(router, toastr) {\n      this.router = router;\n      this.toastr = toastr;\n    }\n\n    intercept(req, next) {\n      return next.handle(req).pipe(catchError(error => {\n        if (error) {\n          if (error.status === 400) {\n            if (error.error.errors) {\n              throw error.error;\n            } else {\n              this.toastr.error(error.error.message, error.error.statusCode);\n            }\n          }\n\n          if (error.status === 401) {\n            this.toastr.error(error.error.message, error.error.statusCode);\n          }\n\n          if (error.status === 404) {\n            this.router.navigateByUrl('/notfound');\n          }\n\n          if (error.status === 500) {\n            const navigationExtras = {\n              state: {\n                error: error.error\n              }\n            };\n            this.router.navigateByUrl('/servererror', navigationExtras);\n          }\n        }\n\n        return throwError(() => error);\n      }));\n    }\n\n  }\n\n  ErrorInterceptor.ɵfac = function ErrorInterceptor_Factory(t) {\n    return new (t || ErrorInterceptor)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.ToastrService));\n  };\n\n  ErrorInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ErrorInterceptor,\n    factory: ErrorInterceptor.ɵfac\n  });\n  return ErrorInterceptor;\n})();","map":null,"metadata":{},"sourceType":"module"}